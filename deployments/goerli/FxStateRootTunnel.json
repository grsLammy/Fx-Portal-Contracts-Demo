{
  "address": "0x4135Bf055369fE3B9B20154C12d60c4744bA5f3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e4114b7127641b74e5a710b32ad1f07df6c5c18793689adefd64b58960494d7",
  "receipt": {
    "to": null,
    "from": "0xB75D71adFc8E5F7c58eA89c22C3B70BEA84A718d",
    "contractAddress": "0x4135Bf055369fE3B9B20154C12d60c4744bA5f3C",
    "transactionIndex": 0,
    "gasUsed": "2670921",
    "logsBloom": "0x
    "blockHash": "0x017d7c0c946af070012c13c713025cfa3d791063e10dd75c442bf478345a1f22",
    "transactionHash": "0x3e4114b7127641b74e5a710b32ad1f07df6c5c18793689adefd64b58960494d7",
    "logs": [],
    "blockNumber": 7293735,
    "cumulativeGasUsed": "2670921",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8008a2d707e07eb88afd68fbe5ef2ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessageToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}}},\"title\":\"FxStateRootTunnel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/FxStateRootTunnel.sol\":\"FxStateRootTunnel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/FxStateRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { FxBaseRootTunnel } from \\\"./tunnel/FxBaseRootTunnel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FxStateRootTunnel\\r\\n */\\r\\ncontract FxStateRootTunnel is FxBaseRootTunnel {\\r\\n    bytes public latestData;\\r\\n\\r\\n    constructor(address _checkpointManager, address _fxRoot) FxBaseRootTunnel(_checkpointManager, _fxRoot) {}\\r\\n\\r\\n    function _processMessageFromChild(bytes memory data) internal override {\\r\\n        latestData = data;\\r\\n    }\\r\\n\\r\\n    function sendMessageToChild(bytes memory message) public {\\r\\n        _sendMessageToChild(message);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38fcd76e73567ea83a807674b428da306cb711acb404485f5bb54148450ac67a\",\"license\":\"MIT\"},\"src/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\r\\n\\r\\nlibrary ExitPayloadReader {\\r\\n    using RLPReader for bytes;\\r\\n    using RLPReader for RLPReader.RLPItem;\\r\\n\\r\\n    uint8 constant WORD_SIZE = 32;\\r\\n\\r\\n    struct ExitPayload {\\r\\n        RLPReader.RLPItem[] data;\\r\\n    }\\r\\n\\r\\n    struct Receipt {\\r\\n        RLPReader.RLPItem[] data;\\r\\n        bytes raw;\\r\\n        uint256 logIndex;\\r\\n    }\\r\\n\\r\\n    struct Log {\\r\\n        RLPReader.RLPItem data;\\r\\n        RLPReader.RLPItem[] list;\\r\\n    }\\r\\n\\r\\n    struct LogTopics {\\r\\n        RLPReader.RLPItem[] data;\\r\\n    }\\r\\n\\r\\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\r\\n    function copy(\\r\\n        uint256 src,\\r\\n        uint256 dest,\\r\\n        uint256 len\\r\\n    ) private pure {\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // copy as many word sizes as possible\\r\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n\\r\\n            src += WORD_SIZE;\\r\\n            dest += WORD_SIZE;\\r\\n        }\\r\\n\\r\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\r\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\r\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\\r\\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\\r\\n\\r\\n        return ExitPayload(payloadData);\\r\\n    }\\r\\n\\r\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\\r\\n        return payload.data[0].toUint();\\r\\n    }\\r\\n\\r\\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\r\\n        return payload.data[1].toBytes();\\r\\n    }\\r\\n\\r\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\\r\\n        return payload.data[2].toUint();\\r\\n    }\\r\\n\\r\\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\\r\\n        return payload.data[3].toUint();\\r\\n    }\\r\\n\\r\\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\r\\n        return bytes32(payload.data[4].toUint());\\r\\n    }\\r\\n\\r\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\r\\n        return bytes32(payload.data[5].toUint());\\r\\n    }\\r\\n\\r\\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\\r\\n        receipt.raw = payload.data[6].toBytes();\\r\\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\r\\n\\r\\n        if (receiptItem.isList()) {\\r\\n            // legacy tx\\r\\n            receipt.data = receiptItem.toList();\\r\\n        } else {\\r\\n            // pop first byte before parsting receipt\\r\\n            bytes memory typedBytes = receipt.raw;\\r\\n            bytes memory result = new bytes(typedBytes.length - 1);\\r\\n            uint256 srcPtr;\\r\\n            uint256 destPtr;\\r\\n            assembly {\\r\\n                srcPtr := add(33, typedBytes)\\r\\n                destPtr := add(0x20, result)\\r\\n            }\\r\\n\\r\\n            copy(srcPtr, destPtr, result.length);\\r\\n            receipt.data = result.toRlpItem().toList();\\r\\n        }\\r\\n\\r\\n        receipt.logIndex = getReceiptLogIndex(payload);\\r\\n        return receipt;\\r\\n    }\\r\\n\\r\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\r\\n        return payload.data[7].toBytes();\\r\\n    }\\r\\n\\r\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\\r\\n        return payload.data[8].toBytes();\\r\\n    }\\r\\n\\r\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\\r\\n        return payload.data[8].toUint();\\r\\n    }\\r\\n\\r\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\\r\\n        return payload.data[9].toUint();\\r\\n    }\\r\\n\\r\\n    // Receipt methods\\r\\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\\r\\n        return receipt.raw;\\r\\n    }\\r\\n\\r\\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\\r\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\r\\n        return Log(logData, logData.toList());\\r\\n    }\\r\\n\\r\\n    // Log methods\\r\\n    function getEmitter(Log memory log) internal pure returns (address) {\\r\\n        return RLPReader.toAddress(log.list[0]);\\r\\n    }\\r\\n\\r\\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\\r\\n        return LogTopics(log.list[1].toList());\\r\\n    }\\r\\n\\r\\n    function getData(Log memory log) internal pure returns (bytes memory) {\\r\\n        return log.list[2].toBytes();\\r\\n    }\\r\\n\\r\\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\\r\\n        return log.data.toRlpBytes();\\r\\n    }\\r\\n\\r\\n    // LogTopics methods\\r\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\\r\\n        return topics.data[index];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x69bbf5ace9df7f3d2617093b058662d161873804ee0bc39e5fa9f8e77c774e8f\"},\"src/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Merkle {\\r\\n    function checkMembership(\\r\\n        bytes32 leaf,\\r\\n        uint256 index,\\r\\n        bytes32 rootHash,\\r\\n        bytes memory proof\\r\\n    ) internal pure returns (bool) {\\r\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\r\\n        uint256 proofHeight = proof.length / 32;\\r\\n        // Proof of size n means, height of the tree is n+1.\\r\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\r\\n        require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\r\\n\\r\\n        bytes32 proofElement;\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\r\\n            assembly {\\r\\n                proofElement := mload(add(proof, i))\\r\\n            }\\r\\n\\r\\n            if (index % 2 == 0) {\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n\\r\\n            index = index / 2;\\r\\n        }\\r\\n        return computedHash == rootHash;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5d79fb8afb2d2d16b92dc644e9f68c2e2b0a684d3c4b0b20a6d8a2f2b6287c79\",\"license\":\"MIT\"},\"src/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\r\\n\\r\\nlibrary MerklePatriciaProof {\\r\\n    /*\\r\\n     * @dev Verifies a merkle patricia proof.\\r\\n     * @param value The terminating value in the trie.\\r\\n     * @param encodedPath The path in the trie leading to value.\\r\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\r\\n     * @param root The root hash of the trie.\\r\\n     * @return The boolean validity of the proof.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes memory value,\\r\\n        bytes memory encodedPath,\\r\\n        bytes memory rlpParentNodes,\\r\\n        bytes32 root\\r\\n    ) internal pure returns (bool) {\\r\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\r\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\r\\n\\r\\n        bytes memory currentNode;\\r\\n        RLPReader.RLPItem[] memory currentNodeList;\\r\\n\\r\\n        bytes32 nodeKey = root;\\r\\n        uint256 pathPtr = 0;\\r\\n\\r\\n        bytes memory path = _getNibbleArray(encodedPath);\\r\\n        if (path.length == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\r\\n            if (pathPtr > path.length) {\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\r\\n            if (nodeKey != keccak256(currentNode)) {\\r\\n                return false;\\r\\n            }\\r\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\r\\n\\r\\n            if (currentNodeList.length == 17) {\\r\\n                if (pathPtr == path.length) {\\r\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\r\\n                        return true;\\r\\n                    } else {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\r\\n                if (nextPathNibble > 16) {\\r\\n                    return false;\\r\\n                }\\r\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\r\\n                pathPtr += 1;\\r\\n            } else if (currentNodeList.length == 2) {\\r\\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\r\\n                if (pathPtr + traversed == path.length) {\\r\\n                    //leaf node\\r\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\r\\n                        return true;\\r\\n                    } else {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //extension node\\r\\n                if (traversed == 0) {\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                pathPtr += traversed;\\r\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\r\\n            } else {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _nibblesToTraverse(\\r\\n        bytes memory encodedPartialPath,\\r\\n        bytes memory path,\\r\\n        uint256 pathPtr\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 len = 0;\\r\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\r\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\r\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\r\\n        bytes memory slicedPath = new bytes(partialPath.length);\\r\\n\\r\\n        // pathPtr counts nibbles in path\\r\\n        // partialPath.length is a number of nibbles\\r\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\r\\n            bytes1 pathNibble = path[i];\\r\\n            slicedPath[i - pathPtr] = pathNibble;\\r\\n        }\\r\\n\\r\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\r\\n            len = partialPath.length;\\r\\n        } else {\\r\\n            len = 0;\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n\\r\\n    // bytes b must be hp encoded\\r\\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\r\\n        bytes memory nibbles = \\\"\\\";\\r\\n        if (b.length > 0) {\\r\\n            uint8 offset;\\r\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\r\\n            if (hpNibble == 1 || hpNibble == 3) {\\r\\n                nibbles = new bytes(b.length * 2 - 1);\\r\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\r\\n                nibbles[0] = oddNibble;\\r\\n                offset = 1;\\r\\n            } else {\\r\\n                nibbles = new bytes(b.length * 2 - 2);\\r\\n                offset = 0;\\r\\n            }\\r\\n\\r\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\r\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\r\\n            }\\r\\n        }\\r\\n        return nibbles;\\r\\n    }\\r\\n\\r\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\r\\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x561b252d7e76833339d68dffa0afb0edce3173e1e1baaf3db201ae03225dfa80\",\"license\":\"MIT\"},\"src/lib/RLPReader.sol\":{\"content\":\"/*\\r\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\r\\n * Please reach out with any questions or concerns\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary RLPReader {\\r\\n    uint8 constant STRING_SHORT_START = 0x80;\\r\\n    uint8 constant STRING_LONG_START = 0xb8;\\r\\n    uint8 constant LIST_SHORT_START = 0xc0;\\r\\n    uint8 constant LIST_LONG_START = 0xf8;\\r\\n    uint8 constant WORD_SIZE = 32;\\r\\n\\r\\n    struct RLPItem {\\r\\n        uint256 len;\\r\\n        uint256 memPtr;\\r\\n    }\\r\\n\\r\\n    struct Iterator {\\r\\n        RLPItem item; // Item that's being iterated over.\\r\\n        uint256 nextPtr; // Position of the next item in the list.\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\r\\n     * @param self The iterator.\\r\\n     * @return The next element in the iteration.\\r\\n     */\\r\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\r\\n        require(hasNext(self));\\r\\n\\r\\n        uint256 ptr = self.nextPtr;\\r\\n        uint256 itemLength = _itemLength(ptr);\\r\\n        self.nextPtr = ptr + itemLength;\\r\\n\\r\\n        return RLPItem(itemLength, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the iteration has more elements.\\r\\n     * @param self The iterator.\\r\\n     * @return true if the iteration has more elements.\\r\\n     */\\r\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\r\\n        RLPItem memory item = self.item;\\r\\n        return self.nextPtr < item.memPtr + item.len;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param item RLP encoded bytes\\r\\n     */\\r\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\r\\n        uint256 memPtr;\\r\\n        assembly {\\r\\n            memPtr := add(item, 0x20)\\r\\n        }\\r\\n\\r\\n        return RLPItem(item.length, memPtr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Create an iterator. Reverts if item is not a list.\\r\\n     * @param self The RLP item.\\r\\n     * @return An 'Iterator' over the item.\\r\\n     */\\r\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\r\\n        require(isList(self));\\r\\n\\r\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\r\\n        return Iterator(self, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param item RLP encoded bytes\\r\\n     */\\r\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\r\\n        return item.len;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param item RLP encoded bytes\\r\\n     */\\r\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\r\\n        return item.len - _payloadOffset(item.memPtr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param item RLP encoded list in bytes\\r\\n     */\\r\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\r\\n        require(isList(item));\\r\\n\\r\\n        uint256 items = numItems(item);\\r\\n        RLPItem[] memory result = new RLPItem[](items);\\r\\n\\r\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\r\\n        uint256 dataLen;\\r\\n        for (uint256 i = 0; i < items; i++) {\\r\\n            dataLen = _itemLength(memPtr);\\r\\n            result[i] = RLPItem(dataLen, memPtr);\\r\\n            memPtr = memPtr + dataLen;\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\r\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\r\\n        if (item.len == 0) return false;\\r\\n\\r\\n        uint8 byte0;\\r\\n        uint256 memPtr = item.memPtr;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < LIST_SHORT_START) return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\r\\n     * @return keccak256 hash of RLP encoded bytes.\\r\\n     */\\r\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\r\\n        uint256 ptr = item.memPtr;\\r\\n        uint256 len = item.len;\\r\\n        bytes32 result;\\r\\n        assembly {\\r\\n            result := keccak256(ptr, len)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\r\\n        uint256 offset = _payloadOffset(item.memPtr);\\r\\n        uint256 memPtr = item.memPtr + offset;\\r\\n        uint256 len = item.len - offset; // data length\\r\\n        return (memPtr, len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\r\\n     * @return keccak256 hash of the item payload.\\r\\n     */\\r\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\r\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\r\\n        bytes32 result;\\r\\n        assembly {\\r\\n            result := keccak256(memPtr, len)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /** RLPItem conversions into data types **/\\r\\n\\r\\n    // @returns raw rlp encoding in bytes\\r\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\r\\n        bytes memory result = new bytes(item.len);\\r\\n        if (result.length == 0) return result;\\r\\n\\r\\n        uint256 ptr;\\r\\n        assembly {\\r\\n            ptr := add(0x20, result)\\r\\n        }\\r\\n\\r\\n        copy(item.memPtr, ptr, item.len);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // any non-zero byte is considered true\\r\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\r\\n        require(item.len == 1);\\r\\n        uint256 result;\\r\\n        uint256 memPtr = item.memPtr;\\r\\n        assembly {\\r\\n            result := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        return result == 0 ? false : true;\\r\\n    }\\r\\n\\r\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\r\\n        // 1 byte for the length prefix\\r\\n        require(item.len == 21);\\r\\n\\r\\n        return address(uint160(toUint(item)));\\r\\n    }\\r\\n\\r\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\r\\n        require(item.len > 0 && item.len <= 33);\\r\\n\\r\\n        uint256 offset = _payloadOffset(item.memPtr);\\r\\n        uint256 len = item.len - offset;\\r\\n\\r\\n        uint256 result;\\r\\n        uint256 memPtr = item.memPtr + offset;\\r\\n        assembly {\\r\\n            result := mload(memPtr)\\r\\n\\r\\n            // shfit to the correct location if neccesary\\r\\n            if lt(len, 32) {\\r\\n                result := div(result, exp(256, sub(32, len)))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // enforces 32 byte length\\r\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\r\\n        // one byte prefix\\r\\n        require(item.len == 33);\\r\\n\\r\\n        uint256 result;\\r\\n        uint256 memPtr = item.memPtr + 1;\\r\\n        assembly {\\r\\n            result := mload(memPtr)\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\r\\n        require(item.len > 0);\\r\\n\\r\\n        uint256 offset = _payloadOffset(item.memPtr);\\r\\n        uint256 len = item.len - offset; // data length\\r\\n        bytes memory result = new bytes(len);\\r\\n\\r\\n        uint256 destPtr;\\r\\n        assembly {\\r\\n            destPtr := add(0x20, result)\\r\\n        }\\r\\n\\r\\n        copy(item.memPtr + offset, destPtr, len);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Private Helpers\\r\\n     */\\r\\n\\r\\n    // @return number of payload items inside an encoded list.\\r\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\r\\n        if (item.len == 0) return 0;\\r\\n\\r\\n        uint256 count = 0;\\r\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\r\\n        uint256 endPtr = item.memPtr + item.len;\\r\\n        while (currPtr < endPtr) {\\r\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\r\\n            count++;\\r\\n        }\\r\\n\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    // @return entire rlp item byte length\\r\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\r\\n        uint256 itemLen;\\r\\n        uint256 byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\r\\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\r\\n        else if (byte0 < LIST_SHORT_START) {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\r\\n                memPtr := add(memPtr, 1) // skip over the first byte\\r\\n                /* 32 byte word size */\\r\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        } else if (byte0 < LIST_LONG_START) {\\r\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\r\\n        } else {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xf7)\\r\\n                memPtr := add(memPtr, 1)\\r\\n\\r\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return itemLen;\\r\\n    }\\r\\n\\r\\n    // @return number of bytes until the data\\r\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\r\\n        uint256 byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) return 0;\\r\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\r\\n        else if (byte0 < LIST_SHORT_START)\\r\\n            // being explicit\\r\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\r\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @param src Pointer to source\\r\\n     * @param dest Pointer to destination\\r\\n     * @param len Amount of memory to copy from the source\\r\\n     */\\r\\n    function copy(\\r\\n        uint256 src,\\r\\n        uint256 dest,\\r\\n        uint256 len\\r\\n    ) private pure {\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // copy as many word sizes as possible\\r\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n\\r\\n            src += WORD_SIZE;\\r\\n            dest += WORD_SIZE;\\r\\n        }\\r\\n\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\r\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\r\\n\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\r\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd3505afc29397bd4ca396f732515c1a498bc2561a99b678bfd53c4bd978a5eb8\"},\"src/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { RLPReader } from \\\"../lib/RLPReader.sol\\\";\\r\\nimport { MerklePatriciaProof } from \\\"../lib/MerklePatriciaProof.sol\\\";\\r\\nimport { Merkle } from \\\"../lib/Merkle.sol\\\";\\r\\nimport { ExitPayloadReader } from \\\"../lib/ExitPayloadReader.sol\\\";\\r\\n\\r\\ninterface IFxStateSender {\\r\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\r\\n}\\r\\n\\r\\ncontract ICheckpointManager {\\r\\n    struct HeaderBlock {\\r\\n        bytes32 root;\\r\\n        uint256 start;\\r\\n        uint256 end;\\r\\n        uint256 createdAt;\\r\\n        address proposer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice mapping of checkpoint header numbers to block details\\r\\n     * @dev These checkpoints are submited by plasma contracts\\r\\n     */\\r\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\r\\n}\\r\\n\\r\\nabstract contract FxBaseRootTunnel {\\r\\n    using RLPReader for RLPReader.RLPItem;\\r\\n    using Merkle for bytes32;\\r\\n    using ExitPayloadReader for bytes;\\r\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\r\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\r\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\r\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\r\\n\\r\\n    // keccak256(MessageSent(bytes))\\r\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\r\\n\\r\\n    // state sender contract\\r\\n    IFxStateSender public fxRoot;\\r\\n    // root chain manager\\r\\n    ICheckpointManager public checkpointManager;\\r\\n    // child tunnel contract which receives and sends messages\\r\\n    address public fxChildTunnel;\\r\\n\\r\\n    // storage to avoid duplicate exits\\r\\n    mapping(bytes32 => bool) public processedExits;\\r\\n\\r\\n    constructor(address _checkpointManager, address _fxRoot) {\\r\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\r\\n        fxRoot = IFxStateSender(_fxRoot);\\r\\n    }\\r\\n\\r\\n    // set fxChildTunnel if not set already\\r\\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\\r\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\r\\n        fxChildTunnel = _fxChildTunnel;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send bytes message to Child Tunnel\\r\\n     * @param message bytes message that will be sent to Child Tunnel\\r\\n     * some message examples -\\r\\n     *   abi.encode(tokenId);\\r\\n     *   abi.encode(tokenId, tokenMetadata);\\r\\n     *   abi.encode(messageType, messageData);\\r\\n     */\\r\\n    function _sendMessageToChild(bytes memory message) internal {\\r\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\r\\n    }\\r\\n\\r\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\r\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\r\\n\\r\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\r\\n        uint256 blockNumber = payload.getBlockNumber();\\r\\n        // checking if exit has already been processed\\r\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\r\\n        bytes32 exitHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                blockNumber,\\r\\n                // first 2 nibbles are dropped while generating nibble array\\r\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\r\\n                // so converting to nibble array and then hashing it\\r\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\r\\n                payload.getReceiptLogIndex()\\r\\n            )\\r\\n        );\\r\\n        require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\r\\n        processedExits[exitHash] = true;\\r\\n\\r\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\r\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\r\\n\\r\\n        // check child tunnel\\r\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\r\\n\\r\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\r\\n        // verify receipt inclusion\\r\\n        require(\\r\\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\\r\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\r\\n        );\\r\\n\\r\\n        // verify checkpoint inclusion\\r\\n        _checkBlockMembershipInCheckpoint(\\r\\n            blockNumber,\\r\\n            payload.getBlockTime(),\\r\\n            payload.getTxRoot(),\\r\\n            receiptRoot,\\r\\n            payload.getHeaderNumber(),\\r\\n            payload.getBlockProof()\\r\\n        );\\r\\n\\r\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\r\\n\\r\\n        require(\\r\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\r\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\r\\n        );\\r\\n\\r\\n        // received message data\\r\\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\r\\n        return message;\\r\\n    }\\r\\n\\r\\n    function _checkBlockMembershipInCheckpoint(\\r\\n        uint256 blockNumber,\\r\\n        uint256 blockTime,\\r\\n        bytes32 txRoot,\\r\\n        bytes32 receiptRoot,\\r\\n        uint256 headerNumber,\\r\\n        bytes memory blockProof\\r\\n    ) private view returns (uint256) {\\r\\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\r\\n\\r\\n        require(\\r\\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\r\\n                blockNumber - startBlock,\\r\\n                headerRoot,\\r\\n                blockProof\\r\\n            ),\\r\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\r\\n        );\\r\\n        return createdAt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice receive message from  L2 to L1, validated by proof\\r\\n     * @dev This function verifies if the transaction actually happened on child chain\\r\\n     *\\r\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\r\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\r\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\r\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\r\\n     *  3 - blockTime - Reference tx block time\\r\\n     *  4 - txRoot - Transactions root of block\\r\\n     *  5 - receiptRoot - Receipts root of block\\r\\n     *  6 - receipt - Receipt of the reference transaction\\r\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\r\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\r\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\r\\n     */\\r\\n    function receiveMessage(bytes memory inputData) public virtual {\\r\\n        bytes memory message = _validateAndExtractMessage(inputData);\\r\\n        _processMessageFromChild(message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process message received from Child Tunnel\\r\\n     * @dev function needs to be implemented to handle message as per requirement\\r\\n     * This is called by onStateReceive function.\\r\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\r\\n     * @param message bytes message that was sent from Child Tunnel\\r\\n     */\\r\\n    function _processMessageFromChild(bytes memory message) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x43f332baa6f83ca136d1249959abaf6e03dbc021a3813d4a60a90db3bdfeb926\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003013380380620030138339818101604052810190620000379190620000db565b818181600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000175565b600081519050620000d5816200015b565b92915050565b60008060408385031215620000f557620000f462000156565b5b60006200010585828601620000c4565b92505060206200011885828601620000c4565b9150509250929050565b60006200012f8262000136565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001668162000122565b81146200017257600080fd5b50565b612e8e80620001856000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063972c492811610066578063972c492814610120578063aea4e49e1461013e578063c0857ba01461015a578063de9b771f14610178578063f953cec71461019657610093565b80630e387de614610098578063142bc2ae146100b65780634c09e6e8146100d4578063607f2d42146100f0575b600080fd5b6100a06101b2565b6040516100ad9190612404565b60405180910390f35b6100be6101d9565b6040516100cb919061241f565b60405180910390f35b6100ee60048036038101906100e9919061204f565b610267565b005b61010a60048036038101906101059190611fa7565b610273565b60405161011791906123e9565b60405180910390f35b610128610293565b604051610135919061239e565b60405180910390f35b61015860048036038101906101539190611f7a565b6102b9565b005b61016261038e565b60405161016f9190612441565b60405180910390f35b6101806103b4565b60405161018d919061245c565b60405180910390f35b6101b060048036038101906101ab919061204f565b6103d8565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b600480546101e6906129f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610212906129f4565b801561025f5780601f106102345761010080835404028352916020019161025f565b820191906000526020600020905b81548152906001019060200180831161024257829003601f168201915b505050505081565b610270816103f2565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190612477565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006103e3826104a4565b90506103ee816107a9565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161046f9291906123b9565b600060405180830381600087803b15801561048957600080fd5b505af115801561049d573d6000803e3d6000fd5b5050505050565b606060006104b1836107c3565b905060006104be826107f7565b905060006104cb83610828565b90506000816104d984610859565b6104e286610a6f565b6040516020016104f493929190612317565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a906124b7565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060006105aa85610aa0565b905060006105b782610bc5565b90506105c281610c3c565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064890612557565b60405180910390fd5b600061065c87610c6d565b905061067a61066a84610ca1565b876106748a610caf565b84610ce0565b6106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090612497565b60405180910390fd5b6106e7856106c689610fe6565b6106cf8a611017565b846106d98c61104b565b6106e28d61107c565b6110ad565b5060006106f383611203565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b61073561073060008461124890919063ffffffff16565b611277565b60001b14610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f90612537565b60405180910390fd5b6000610783846112fa565b8060200190518101906107969190612098565b9050809950505050505050505050919050565b80600490805190602001906107bf929190611d0d565b5050565b6107cb611d93565b60006107de6107d98461132b565b611359565b9050604051806020016040528082815250915050919050565b6060610821826000015160088151811061081457610813612ba3565b5b602002602001015161146e565b9050919050565b6000610852826000015160028151811061084557610844612ba3565b5b6020026020010151611277565b9050919050565b60606000604051806020016040528060008152509050600083511115610a6657600080610887600086611525565b60f81c905060018160ff1614806108a1575060038160ff16145b1561096b576001600286516108b69190612849565b6108c091906128a3565b67ffffffffffffffff8111156108d9576108d8612bd2565b5b6040519080825280601f01601f19166020018201604052801561090b5781602001600182028036833780820191505090505b509250600061091b600187611525565b9050808460008151811061093257610931612ba3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506109d7565b600280865161097a9190612849565b61098491906128a3565b67ffffffffffffffff81111561099d5761099c612bd2565b5b6040519080825280601f01601f1916602001820160405280156109cf5781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b8351811015610a6257610a0d60028460ff16836109fd91906128a3565b610a079190612620565b87611525565b848281518110610a2057610a1f612ba3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610a5a90612a57565b9150506109e0565b5050505b80915050919050565b6000610a998260000151600981518110610a8c57610a8b612ba3565b5b6020026020010151611277565b9050919050565b610aa8611da6565b610ad08260000151600681518110610ac357610ac2612ba3565b5b602002602001015161146e565b81602001819052506000610ae7826020015161132b565b9050610af2816115bd565b15610b0d57610b0081611359565b8260000181905250610bad565b600082602001519050600060018251610b2691906128a3565b67ffffffffffffffff811115610b3f57610b3e612bd2565b5b6040519080825280601f01601f191660200182016040528015610b715781602001600182028036833780820191505090505b509050600080836021019150826020019050610b8f8282855161160b565b610ba0610b9b8461132b565b611359565b8660000181905250505050505b610bb683610a6f565b82604001818152505050919050565b610bcd611dc7565b6000610bf78360000151600381518110610bea57610be9612ba3565b5b6020026020010151611359565b836040015181518110610c0d57610c0c612ba3565b5b602002602001015190506040518060400160405280828152602001610c3183611359565b815250915050919050565b6000610c668260200151600081518110610c5957610c58612ba3565b5b60200260200101516116a8565b9050919050565b6000610c978260000151600581518110610c8a57610c89612ba3565b5b6020026020010151611277565b60001b9050919050565b606081602001519050919050565b6060610cd98260000151600781518110610ccc57610ccb612ba3565b5b602002602001015161146e565b9050919050565b600080610cec8461132b565b90506000610cf982611359565b90506060806000869050600080610d0f8b610859565b9050600081511415610d2b576000975050505050505050610fde565b60005b8651811015610fd5578151831115610d5157600098505050505050505050610fde565b610d74878281518110610d6757610d66612ba3565b5b60200260200101516116cb565b955085805190602001208414610d9557600098505050505050505050610fde565b610db8878281518110610dab57610daa612ba3565b5b6020026020010151611359565b9450601185511415610eab578151831415610e28578c80519060200120610df986601081518110610dec57610deb612ba3565b5b602002602001015161146e565b805190602001201415610e1757600198505050505050505050610fde565b600098505050505050505050610fde565b6000828481518110610e3d57610e3c612ba3565b5b602001015160f81c60f81b60f81c905060108160ff161115610e6b5760009950505050505050505050610fde565b610e91868260ff1681518110610e8457610e83612ba3565b5b602002602001015161175b565b60001b9450600184610ea39190612620565b935050610fc2565b600285511415610fb0576000610ee5610ede87600081518110610ed157610ed0612ba3565b5b602002602001015161146e565b8486611792565b905082518185610ef59190612620565b1415610f58578d80519060200120610f2787600181518110610f1a57610f19612ba3565b5b602002602001015161146e565b805190602001201415610f465760019950505050505050505050610fde565b60009950505050505050505050610fde565b6000811415610f735760009950505050505050505050610fde565b8084610f7f9190612620565b9350610fa586600181518110610f9857610f97612ba3565b5b602002602001015161175b565b60001b945050610fc1565b600098505050505050505050610fde565b5b8080610fcd90612a57565b915050610d2e565b50505050505050505b949350505050565b6000611010826000015160038151811061100357611002612ba3565b5b6020026020010151611277565b9050919050565b6000611041826000015160048151811061103457611033612ba3565b5b6020026020010151611277565b60001b9050919050565b6000611075826000015160008151811061106857611067612ba3565b5b6020026020010151611277565b9050919050565b60606110a6826000015160018151811061109957611098612ba3565b5b602002602001015161146e565b9050919050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b815260040161110e9190612577565b60a06040518083038186803b15801561112657600080fd5b505afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190611fd4565b50935050925092506111b4828b61117591906128a3565b84878d8d8d8d60405160200161118e9493929190612350565b604051602081830303815290604052805190602001206118c8909392919063ffffffff16565b6111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90612517565b60405180910390fd5b8093505050509695505050505050565b61120b611de7565b604051806020016040528061123e846020015160018151811061123157611230612ba3565b5b6020026020010151611359565b8152509050919050565b611250611dfa565b8260000151828151811061126757611266612ba3565b5b6020026020010151905092915050565b600080826000015111801561129157506021826000015111155b61129a57600080fd5b60006112a98360200151611a39565b905060008184600001516112bd91906128a3565b90506000808386602001516112d29190612620565b90508051915060208310156112ee57826020036101000a820491505b81945050505050919050565b6060611324826020015160028151811061131757611316612ba3565b5b602002602001015161146e565b9050919050565b611333611dfa565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060611364826115bd565b61136d57600080fd5b600061137883611af8565b905060008167ffffffffffffffff81111561139657611395612bd2565b5b6040519080825280602002602001820160405280156113cf57816020015b6113bc611dfa565b8152602001906001900390816113b45790505b50905060006113e18560200151611a39565b85602001516113f09190612620565b9050600080600090505b848110156114615761140b83611b86565b915060405180604001604052808381526020018481525084828151811061143557611434612ba3565b5b6020026020010181905250818361144c9190612620565b9250808061145990612a57565b9150506113fa565b5082945050505050919050565b6060600082600001511161148157600080fd5b60006114908360200151611a39565b905060008184600001516114a491906128a3565b905060008167ffffffffffffffff8111156114c2576114c1612bd2565b5b6040519080825280601f01601f1916602001820160405280156114f45781602001600182028036833780820191505090505b50905060008160200190506115198487602001516115129190612620565b8285611c62565b81945050505050919050565b6000806002846115359190612ab4565b146115785760108260028561154a9190612676565b8151811061155b5761155a612ba3565b5b602001015160f81c60f81b60f81c6115739190612ae5565b6115b2565b6010826002856115889190612676565b8151811061159957611598612ba3565b5b602001015160f81c60f81b60f81c6115b191906126a7565b5b60f81b905092915050565b600080826000015114156115d45760009050611606565b60008083602001519050805160001a915060c060ff168260ff1610156115ff57600092505050611606565b6001925050505b919050565b6000811415611619576116a3565b5b602060ff1681106116645782518252602060ff16836116399190612620565b9250602060ff168261164b9190612620565b9150602060ff168161165d91906128a3565b905061161a565b6000600182602060ff1661167891906128a3565b610100611685919061272b565b61168f91906128a3565b905080198451168184511681811785525050505b505050565b600060158260000151146116bb57600080fd5b6116c482611277565b9050919050565b60606000826000015167ffffffffffffffff8111156116ed576116ec612bd2565b5b6040519080825280601f01601f19166020018201604052801561171f5781602001600182028036833780820191505090505b5090506000815114156117355780915050611756565b60008160200190506117508460200151828660000151611c62565b81925050505b919050565b6000602182600001511461176e57600080fd5b600080600184602001516117829190612620565b9050805191508192505050919050565b6000806000905060006117a486610859565b90506000815167ffffffffffffffff8111156117c3576117c2612bd2565b5b6040519080825280601f01601f1916602001820160405280156117f55781602001600182028036833780820191505090505b50905060008590505b82518661180b9190612620565b81101561189657600087828151811061182757611826612ba3565b5b602001015160f81c60f81b90508083888461184291906128a3565b8151811061185357611852612ba3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061188e90612a57565b9150506117fe565b508080519060200120828051906020012014156118b657815192506118bb565b600092505b8293505050509392505050565b600080602083516118d99190612ab4565b14611919576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611910906124d7565b60405180910390fd5b6000602083516119299190612676565b9050806002611938919061272b565b8510611979576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611970906124f7565b60405180910390fd5b6000808790506000602090505b85518111611a285780860151925060006002896119a39190612ab4565b14156119d95781836040516020016119bc9291906122eb565b604051602081830303815290604052805190602001209150611a05565b82826040516020016119ec9291906122eb565b6040516020818303038152906040528051906020012091505b600288611a129190612676565b9750602081611a219190612620565b9050611986565b508581149350505050949350505050565b600080825160001a9050608060ff16811015611a59576000915050611af3565b60b860ff16811080611a7e575060c060ff168110158015611a7d575060f860ff1681105b5b15611a8d576001915050611af3565b60c060ff16811015611ac85760018060b8611aa891906128d7565b60ff1682611ab691906128a3565b611ac09190612620565b915050611af3565b60018060f8611ad791906128d7565b60ff1682611ae591906128a3565b611aef9190612620565b9150505b919050565b60008082600001511415611b0f5760009050611b81565b600080611b1f8460200151611a39565b8460200151611b2e9190612620565b9050600084600001518560200151611b469190612620565b90505b80821015611b7a57611b5a82611b86565b82611b659190612620565b91508280611b7290612a57565b935050611b49565b8293505050505b919050565b6000806000835160001a9050608060ff16811015611ba75760019150611c58565b60b860ff16811015611bd6576001608060ff1682611bc591906128a3565b611bcf9190612620565b9150611c57565b60c060ff16811015611c065760b78103600185019450806020036101000a85510460018201810193505050611c56565b60f860ff16811015611c3557600160c060ff1682611c2491906128a3565b611c2e9190612620565b9150611c55565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b6000811415611c7057611d08565b5b602060ff168110611cbb5782518252602060ff1683611c909190612620565b9250602060ff1682611ca29190612620565b9150602060ff1681611cb491906128a3565b9050611c71565b6000811415611cc957611d08565b6000600182602060ff16611cdd91906128a3565b610100611cea919061272b565b611cf491906128a3565b905080198451168184511681811785525050505b505050565b828054611d19906129f4565b90600052602060002090601f016020900481019282611d3b5760008555611d82565b82601f10611d5457805160ff1916838001178555611d82565b82800160010185558215611d82579182015b82811115611d81578251825591602001919060010190611d66565b5b509050611d8f9190611e14565b5090565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b6040518060400160405280611dda611dfa565b8152602001606081525090565b6040518060200160405280606081525090565b604051806040016040528060008152602001600081525090565b5b80821115611e2d576000816000905550600101611e15565b5090565b6000611e44611e3f846125b7565b612592565b905082815260208101848484011115611e6057611e5f612c06565b5b611e6b8482856129b2565b509392505050565b6000611e86611e81846125b7565b612592565b905082815260208101848484011115611ea257611ea1612c06565b5b611ead8482856129c1565b509392505050565b600081359050611ec481612e13565b92915050565b600081519050611ed981612e13565b92915050565b600081359050611eee81612e2a565b92915050565b600081519050611f0381612e2a565b92915050565b600082601f830112611f1e57611f1d612c01565b5b8135611f2e848260208601611e31565b91505092915050565b600082601f830112611f4c57611f4b612c01565b5b8151611f5c848260208601611e73565b91505092915050565b600081519050611f7481612e41565b92915050565b600060208284031215611f9057611f8f612c10565b5b6000611f9e84828501611eb5565b91505092915050565b600060208284031215611fbd57611fbc612c10565b5b6000611fcb84828501611edf565b91505092915050565b600080600080600060a08688031215611ff057611fef612c10565b5b6000611ffe88828901611ef4565b955050602061200f88828901611f65565b945050604061202088828901611f65565b935050606061203188828901611f65565b925050608061204288828901611eca565b9150509295509295909350565b60006020828403121561206557612064612c10565b5b600082013567ffffffffffffffff81111561208357612082612c0b565b5b61208f84828501611f09565b91505092915050565b6000602082840312156120ae576120ad612c10565b5b600082015167ffffffffffffffff8111156120cc576120cb612c0b565b5b6120d884828501611f37565b91505092915050565b6120ea8161290b565b82525050565b6120f98161291d565b82525050565b61210881612929565b82525050565b61211f61211a82612929565b612aa0565b82525050565b6000612130826125e8565b61213a81856125f3565b935061214a8185602086016129c1565b61215381612c15565b840191505092915050565b6000612169826125e8565b6121738185612604565b93506121838185602086016129c1565b80840191505092915050565b6121988161296a565b82525050565b6121a78161297c565b82525050565b60006121ba602a8361260f565b91506121c582612c33565b604082019050919050565b60006121dd60238361260f565b91506121e882612c82565b604082019050919050565b600061220060248361260f565b915061220b82612cd1565b604082019050919050565b600061222360148361260f565b915061222e82612d20565b602082019050919050565b600061224660158361260f565b915061225182612d49565b602082019050919050565b6000612269601c8361260f565b915061227482612d72565b602082019050919050565b600061228c601f8361260f565b915061229782612d9b565b602082019050919050565b60006122af60258361260f565b91506122ba82612dc4565b604082019050919050565b6122ce81612953565b82525050565b6122e56122e082612953565b612aaa565b82525050565b60006122f7828561210e565b602082019150612307828461210e565b6020820191508190509392505050565b600061232382866122d4565b602082019150612333828561215e565b915061233f82846122d4565b602082019150819050949350505050565b600061235c82876122d4565b60208201915061236c82866122d4565b60208201915061237c828561210e565b60208201915061238c828461210e565b60208201915081905095945050505050565b60006020820190506123b360008301846120e1565b92915050565b60006040820190506123ce60008301856120e1565b81810360208301526123e08184612125565b90509392505050565b60006020820190506123fe60008301846120f0565b92915050565b600060208201905061241960008301846120ff565b92915050565b600060208201905081810360008301526124398184612125565b905092915050565b6000602082019050612456600083018461218f565b92915050565b6000602082019050612471600083018461219e565b92915050565b60006020820190508181036000830152612490816121ad565b9050919050565b600060208201905081810360008301526124b0816121d0565b9050919050565b600060208201905081810360008301526124d0816121f3565b9050919050565b600060208201905081810360008301526124f081612216565b9050919050565b6000602082019050818103600083015261251081612239565b9050919050565b600060208201905081810360008301526125308161225c565b9050919050565b600060208201905081810360008301526125508161227f565b9050919050565b60006020820190508181036000830152612570816122a2565b9050919050565b600060208201905061258c60008301846122c5565b92915050565b600061259c6125ad565b90506125a88282612a26565b919050565b6000604051905090565b600067ffffffffffffffff8211156125d2576125d1612bd2565b5b6125db82612c15565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061262b82612953565b915061263683612953565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561266b5761266a612b16565b5b828201905092915050565b600061268182612953565b915061268c83612953565b92508261269c5761269b612b45565b5b828204905092915050565b60006126b28261295d565b91506126bd8361295d565b9250826126cd576126cc612b45565b5b828204905092915050565b6000808291508390505b6001851115612722578086048111156126fe576126fd612b16565b5b600185161561270d5780820291505b808102905061271b85612c26565b94506126e2565b94509492505050565b600061273682612953565b915061274183612953565b925061276e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612776565b905092915050565b6000826127865760019050612842565b816127945760009050612842565b81600181146127aa57600281146127b4576127e3565b6001915050612842565b60ff8411156127c6576127c5612b16565b5b8360020a9150848211156127dd576127dc612b16565b5b50612842565b5060208310610133831016604e8410600b84101617156128185782820a90508381111561281357612812612b16565b5b612842565b61282584848460016126d8565b9250905081840481111561283c5761283b612b16565b5b81810290505b9392505050565b600061285482612953565b915061285f83612953565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561289857612897612b16565b5b828202905092915050565b60006128ae82612953565b91506128b983612953565b9250828210156128cc576128cb612b16565b5b828203905092915050565b60006128e28261295d565b91506128ed8361295d565b925082821015612900576128ff612b16565b5b828203905092915050565b600061291682612933565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006129758261298e565b9050919050565b60006129878261298e565b9050919050565b6000612999826129a0565b9050919050565b60006129ab82612933565b9050919050565b82818337600083830152505050565b60005b838110156129df5780820151818401526020810190506129c4565b838111156129ee576000848401525b50505050565b60006002820490506001821680612a0c57607f821691505b60208210811415612a2057612a1f612b74565b5b50919050565b612a2f82612c15565b810181811067ffffffffffffffff82111715612a4e57612a4d612bd2565b5b80604052505050565b6000612a6282612953565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a9557612a94612b16565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000612abf82612953565b9150612aca83612953565b925082612ada57612ad9612b45565b5b828206905092915050565b6000612af08261295d565b9150612afb8361295d565b925082612b0b57612b0a612b45565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b612e1c8161290b565b8114612e2757600080fd5b50565b612e3381612929565b8114612e3e57600080fd5b50565b612e4a81612953565b8114612e5557600080fd5b5056fea264697066735822122067ae6174cc7dd621966b4cc879c7be7b2c897aad5e2f9fba70f25a744fab258264736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063972c492811610066578063972c492814610120578063aea4e49e1461013e578063c0857ba01461015a578063de9b771f14610178578063f953cec71461019657610093565b80630e387de614610098578063142bc2ae146100b65780634c09e6e8146100d4578063607f2d42146100f0575b600080fd5b6100a06101b2565b6040516100ad9190612404565b60405180910390f35b6100be6101d9565b6040516100cb919061241f565b60405180910390f35b6100ee60048036038101906100e9919061204f565b610267565b005b61010a60048036038101906101059190611fa7565b610273565b60405161011791906123e9565b60405180910390f35b610128610293565b604051610135919061239e565b60405180910390f35b61015860048036038101906101539190611f7a565b6102b9565b005b61016261038e565b60405161016f9190612441565b60405180910390f35b6101806103b4565b60405161018d919061245c565b60405180910390f35b6101b060048036038101906101ab919061204f565b6103d8565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b600480546101e6906129f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610212906129f4565b801561025f5780601f106102345761010080835404028352916020019161025f565b820191906000526020600020905b81548152906001019060200180831161024257829003601f168201915b505050505081565b610270816103f2565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190612477565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006103e3826104a4565b90506103ee816107a9565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161046f9291906123b9565b600060405180830381600087803b15801561048957600080fd5b505af115801561049d573d6000803e3d6000fd5b5050505050565b606060006104b1836107c3565b905060006104be826107f7565b905060006104cb83610828565b90506000816104d984610859565b6104e286610a6f565b6040516020016104f493929190612317565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a906124b7565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060006105aa85610aa0565b905060006105b782610bc5565b90506105c281610c3c565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064890612557565b60405180910390fd5b600061065c87610c6d565b905061067a61066a84610ca1565b876106748a610caf565b84610ce0565b6106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090612497565b60405180910390fd5b6106e7856106c689610fe6565b6106cf8a611017565b846106d98c61104b565b6106e28d61107c565b6110ad565b5060006106f383611203565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b61073561073060008461124890919063ffffffff16565b611277565b60001b14610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f90612537565b60405180910390fd5b6000610783846112fa565b8060200190518101906107969190612098565b9050809950505050505050505050919050565b80600490805190602001906107bf929190611d0d565b5050565b6107cb611d93565b60006107de6107d98461132b565b611359565b9050604051806020016040528082815250915050919050565b6060610821826000015160088151811061081457610813612ba3565b5b602002602001015161146e565b9050919050565b6000610852826000015160028151811061084557610844612ba3565b5b6020026020010151611277565b9050919050565b60606000604051806020016040528060008152509050600083511115610a6657600080610887600086611525565b60f81c905060018160ff1614806108a1575060038160ff16145b1561096b576001600286516108b69190612849565b6108c091906128a3565b67ffffffffffffffff8111156108d9576108d8612bd2565b5b6040519080825280601f01601f19166020018201604052801561090b5781602001600182028036833780820191505090505b509250600061091b600187611525565b9050808460008151811061093257610931612ba3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506109d7565b600280865161097a9190612849565b61098491906128a3565b67ffffffffffffffff81111561099d5761099c612bd2565b5b6040519080825280601f01601f1916602001820160405280156109cf5781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b8351811015610a6257610a0d60028460ff16836109fd91906128a3565b610a079190612620565b87611525565b848281518110610a2057610a1f612ba3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610a5a90612a57565b9150506109e0565b5050505b80915050919050565b6000610a998260000151600981518110610a8c57610a8b612ba3565b5b6020026020010151611277565b9050919050565b610aa8611da6565b610ad08260000151600681518110610ac357610ac2612ba3565b5b602002602001015161146e565b81602001819052506000610ae7826020015161132b565b9050610af2816115bd565b15610b0d57610b0081611359565b8260000181905250610bad565b600082602001519050600060018251610b2691906128a3565b67ffffffffffffffff811115610b3f57610b3e612bd2565b5b6040519080825280601f01601f191660200182016040528015610b715781602001600182028036833780820191505090505b509050600080836021019150826020019050610b8f8282855161160b565b610ba0610b9b8461132b565b611359565b8660000181905250505050505b610bb683610a6f565b82604001818152505050919050565b610bcd611dc7565b6000610bf78360000151600381518110610bea57610be9612ba3565b5b6020026020010151611359565b836040015181518110610c0d57610c0c612ba3565b5b602002602001015190506040518060400160405280828152602001610c3183611359565b815250915050919050565b6000610c668260200151600081518110610c5957610c58612ba3565b5b60200260200101516116a8565b9050919050565b6000610c978260000151600581518110610c8a57610c89612ba3565b5b6020026020010151611277565b60001b9050919050565b606081602001519050919050565b6060610cd98260000151600781518110610ccc57610ccb612ba3565b5b602002602001015161146e565b9050919050565b600080610cec8461132b565b90506000610cf982611359565b90506060806000869050600080610d0f8b610859565b9050600081511415610d2b576000975050505050505050610fde565b60005b8651811015610fd5578151831115610d5157600098505050505050505050610fde565b610d74878281518110610d6757610d66612ba3565b5b60200260200101516116cb565b955085805190602001208414610d9557600098505050505050505050610fde565b610db8878281518110610dab57610daa612ba3565b5b6020026020010151611359565b9450601185511415610eab578151831415610e28578c80519060200120610df986601081518110610dec57610deb612ba3565b5b602002602001015161146e565b805190602001201415610e1757600198505050505050505050610fde565b600098505050505050505050610fde565b6000828481518110610e3d57610e3c612ba3565b5b602001015160f81c60f81b60f81c905060108160ff161115610e6b5760009950505050505050505050610fde565b610e91868260ff1681518110610e8457610e83612ba3565b5b602002602001015161175b565b60001b9450600184610ea39190612620565b935050610fc2565b600285511415610fb0576000610ee5610ede87600081518110610ed157610ed0612ba3565b5b602002602001015161146e565b8486611792565b905082518185610ef59190612620565b1415610f58578d80519060200120610f2787600181518110610f1a57610f19612ba3565b5b602002602001015161146e565b805190602001201415610f465760019950505050505050505050610fde565b60009950505050505050505050610fde565b6000811415610f735760009950505050505050505050610fde565b8084610f7f9190612620565b9350610fa586600181518110610f9857610f97612ba3565b5b602002602001015161175b565b60001b945050610fc1565b600098505050505050505050610fde565b5b8080610fcd90612a57565b915050610d2e565b50505050505050505b949350505050565b6000611010826000015160038151811061100357611002612ba3565b5b6020026020010151611277565b9050919050565b6000611041826000015160048151811061103457611033612ba3565b5b6020026020010151611277565b60001b9050919050565b6000611075826000015160008151811061106857611067612ba3565b5b6020026020010151611277565b9050919050565b60606110a6826000015160018151811061109957611098612ba3565b5b602002602001015161146e565b9050919050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b815260040161110e9190612577565b60a06040518083038186803b15801561112657600080fd5b505afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190611fd4565b50935050925092506111b4828b61117591906128a3565b84878d8d8d8d60405160200161118e9493929190612350565b604051602081830303815290604052805190602001206118c8909392919063ffffffff16565b6111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90612517565b60405180910390fd5b8093505050509695505050505050565b61120b611de7565b604051806020016040528061123e846020015160018151811061123157611230612ba3565b5b6020026020010151611359565b8152509050919050565b611250611dfa565b8260000151828151811061126757611266612ba3565b5b6020026020010151905092915050565b600080826000015111801561129157506021826000015111155b61129a57600080fd5b60006112a98360200151611a39565b905060008184600001516112bd91906128a3565b90506000808386602001516112d29190612620565b90508051915060208310156112ee57826020036101000a820491505b81945050505050919050565b6060611324826020015160028151811061131757611316612ba3565b5b602002602001015161146e565b9050919050565b611333611dfa565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060611364826115bd565b61136d57600080fd5b600061137883611af8565b905060008167ffffffffffffffff81111561139657611395612bd2565b5b6040519080825280602002602001820160405280156113cf57816020015b6113bc611dfa565b8152602001906001900390816113b45790505b50905060006113e18560200151611a39565b85602001516113f09190612620565b9050600080600090505b848110156114615761140b83611b86565b915060405180604001604052808381526020018481525084828151811061143557611434612ba3565b5b6020026020010181905250818361144c9190612620565b9250808061145990612a57565b9150506113fa565b5082945050505050919050565b6060600082600001511161148157600080fd5b60006114908360200151611a39565b905060008184600001516114a491906128a3565b905060008167ffffffffffffffff8111156114c2576114c1612bd2565b5b6040519080825280601f01601f1916602001820160405280156114f45781602001600182028036833780820191505090505b50905060008160200190506115198487602001516115129190612620565b8285611c62565b81945050505050919050565b6000806002846115359190612ab4565b146115785760108260028561154a9190612676565b8151811061155b5761155a612ba3565b5b602001015160f81c60f81b60f81c6115739190612ae5565b6115b2565b6010826002856115889190612676565b8151811061159957611598612ba3565b5b602001015160f81c60f81b60f81c6115b191906126a7565b5b60f81b905092915050565b600080826000015114156115d45760009050611606565b60008083602001519050805160001a915060c060ff168260ff1610156115ff57600092505050611606565b6001925050505b919050565b6000811415611619576116a3565b5b602060ff1681106116645782518252602060ff16836116399190612620565b9250602060ff168261164b9190612620565b9150602060ff168161165d91906128a3565b905061161a565b6000600182602060ff1661167891906128a3565b610100611685919061272b565b61168f91906128a3565b905080198451168184511681811785525050505b505050565b600060158260000151146116bb57600080fd5b6116c482611277565b9050919050565b60606000826000015167ffffffffffffffff8111156116ed576116ec612bd2565b5b6040519080825280601f01601f19166020018201604052801561171f5781602001600182028036833780820191505090505b5090506000815114156117355780915050611756565b60008160200190506117508460200151828660000151611c62565b81925050505b919050565b6000602182600001511461176e57600080fd5b600080600184602001516117829190612620565b9050805191508192505050919050565b6000806000905060006117a486610859565b90506000815167ffffffffffffffff8111156117c3576117c2612bd2565b5b6040519080825280601f01601f1916602001820160405280156117f55781602001600182028036833780820191505090505b50905060008590505b82518661180b9190612620565b81101561189657600087828151811061182757611826612ba3565b5b602001015160f81c60f81b90508083888461184291906128a3565b8151811061185357611852612ba3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061188e90612a57565b9150506117fe565b508080519060200120828051906020012014156118b657815192506118bb565b600092505b8293505050509392505050565b600080602083516118d99190612ab4565b14611919576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611910906124d7565b60405180910390fd5b6000602083516119299190612676565b9050806002611938919061272b565b8510611979576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611970906124f7565b60405180910390fd5b6000808790506000602090505b85518111611a285780860151925060006002896119a39190612ab4565b14156119d95781836040516020016119bc9291906122eb565b604051602081830303815290604052805190602001209150611a05565b82826040516020016119ec9291906122eb565b6040516020818303038152906040528051906020012091505b600288611a129190612676565b9750602081611a219190612620565b9050611986565b508581149350505050949350505050565b600080825160001a9050608060ff16811015611a59576000915050611af3565b60b860ff16811080611a7e575060c060ff168110158015611a7d575060f860ff1681105b5b15611a8d576001915050611af3565b60c060ff16811015611ac85760018060b8611aa891906128d7565b60ff1682611ab691906128a3565b611ac09190612620565b915050611af3565b60018060f8611ad791906128d7565b60ff1682611ae591906128a3565b611aef9190612620565b9150505b919050565b60008082600001511415611b0f5760009050611b81565b600080611b1f8460200151611a39565b8460200151611b2e9190612620565b9050600084600001518560200151611b469190612620565b90505b80821015611b7a57611b5a82611b86565b82611b659190612620565b91508280611b7290612a57565b935050611b49565b8293505050505b919050565b6000806000835160001a9050608060ff16811015611ba75760019150611c58565b60b860ff16811015611bd6576001608060ff1682611bc591906128a3565b611bcf9190612620565b9150611c57565b60c060ff16811015611c065760b78103600185019450806020036101000a85510460018201810193505050611c56565b60f860ff16811015611c3557600160c060ff1682611c2491906128a3565b611c2e9190612620565b9150611c55565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b6000811415611c7057611d08565b5b602060ff168110611cbb5782518252602060ff1683611c909190612620565b9250602060ff1682611ca29190612620565b9150602060ff1681611cb491906128a3565b9050611c71565b6000811415611cc957611d08565b6000600182602060ff16611cdd91906128a3565b610100611cea919061272b565b611cf491906128a3565b905080198451168184511681811785525050505b505050565b828054611d19906129f4565b90600052602060002090601f016020900481019282611d3b5760008555611d82565b82601f10611d5457805160ff1916838001178555611d82565b82800160010185558215611d82579182015b82811115611d81578251825591602001919060010190611d66565b5b509050611d8f9190611e14565b5090565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b6040518060400160405280611dda611dfa565b8152602001606081525090565b6040518060200160405280606081525090565b604051806040016040528060008152602001600081525090565b5b80821115611e2d576000816000905550600101611e15565b5090565b6000611e44611e3f846125b7565b612592565b905082815260208101848484011115611e6057611e5f612c06565b5b611e6b8482856129b2565b509392505050565b6000611e86611e81846125b7565b612592565b905082815260208101848484011115611ea257611ea1612c06565b5b611ead8482856129c1565b509392505050565b600081359050611ec481612e13565b92915050565b600081519050611ed981612e13565b92915050565b600081359050611eee81612e2a565b92915050565b600081519050611f0381612e2a565b92915050565b600082601f830112611f1e57611f1d612c01565b5b8135611f2e848260208601611e31565b91505092915050565b600082601f830112611f4c57611f4b612c01565b5b8151611f5c848260208601611e73565b91505092915050565b600081519050611f7481612e41565b92915050565b600060208284031215611f9057611f8f612c10565b5b6000611f9e84828501611eb5565b91505092915050565b600060208284031215611fbd57611fbc612c10565b5b6000611fcb84828501611edf565b91505092915050565b600080600080600060a08688031215611ff057611fef612c10565b5b6000611ffe88828901611ef4565b955050602061200f88828901611f65565b945050604061202088828901611f65565b935050606061203188828901611f65565b925050608061204288828901611eca565b9150509295509295909350565b60006020828403121561206557612064612c10565b5b600082013567ffffffffffffffff81111561208357612082612c0b565b5b61208f84828501611f09565b91505092915050565b6000602082840312156120ae576120ad612c10565b5b600082015167ffffffffffffffff8111156120cc576120cb612c0b565b5b6120d884828501611f37565b91505092915050565b6120ea8161290b565b82525050565b6120f98161291d565b82525050565b61210881612929565b82525050565b61211f61211a82612929565b612aa0565b82525050565b6000612130826125e8565b61213a81856125f3565b935061214a8185602086016129c1565b61215381612c15565b840191505092915050565b6000612169826125e8565b6121738185612604565b93506121838185602086016129c1565b80840191505092915050565b6121988161296a565b82525050565b6121a78161297c565b82525050565b60006121ba602a8361260f565b91506121c582612c33565b604082019050919050565b60006121dd60238361260f565b91506121e882612c82565b604082019050919050565b600061220060248361260f565b915061220b82612cd1565b604082019050919050565b600061222360148361260f565b915061222e82612d20565b602082019050919050565b600061224660158361260f565b915061225182612d49565b602082019050919050565b6000612269601c8361260f565b915061227482612d72565b602082019050919050565b600061228c601f8361260f565b915061229782612d9b565b602082019050919050565b60006122af60258361260f565b91506122ba82612dc4565b604082019050919050565b6122ce81612953565b82525050565b6122e56122e082612953565b612aaa565b82525050565b60006122f7828561210e565b602082019150612307828461210e565b6020820191508190509392505050565b600061232382866122d4565b602082019150612333828561215e565b915061233f82846122d4565b602082019150819050949350505050565b600061235c82876122d4565b60208201915061236c82866122d4565b60208201915061237c828561210e565b60208201915061238c828461210e565b60208201915081905095945050505050565b60006020820190506123b360008301846120e1565b92915050565b60006040820190506123ce60008301856120e1565b81810360208301526123e08184612125565b90509392505050565b60006020820190506123fe60008301846120f0565b92915050565b600060208201905061241960008301846120ff565b92915050565b600060208201905081810360008301526124398184612125565b905092915050565b6000602082019050612456600083018461218f565b92915050565b6000602082019050612471600083018461219e565b92915050565b60006020820190508181036000830152612490816121ad565b9050919050565b600060208201905081810360008301526124b0816121d0565b9050919050565b600060208201905081810360008301526124d0816121f3565b9050919050565b600060208201905081810360008301526124f081612216565b9050919050565b6000602082019050818103600083015261251081612239565b9050919050565b600060208201905081810360008301526125308161225c565b9050919050565b600060208201905081810360008301526125508161227f565b9050919050565b60006020820190508181036000830152612570816122a2565b9050919050565b600060208201905061258c60008301846122c5565b92915050565b600061259c6125ad565b90506125a88282612a26565b919050565b6000604051905090565b600067ffffffffffffffff8211156125d2576125d1612bd2565b5b6125db82612c15565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061262b82612953565b915061263683612953565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561266b5761266a612b16565b5b828201905092915050565b600061268182612953565b915061268c83612953565b92508261269c5761269b612b45565b5b828204905092915050565b60006126b28261295d565b91506126bd8361295d565b9250826126cd576126cc612b45565b5b828204905092915050565b6000808291508390505b6001851115612722578086048111156126fe576126fd612b16565b5b600185161561270d5780820291505b808102905061271b85612c26565b94506126e2565b94509492505050565b600061273682612953565b915061274183612953565b925061276e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612776565b905092915050565b6000826127865760019050612842565b816127945760009050612842565b81600181146127aa57600281146127b4576127e3565b6001915050612842565b60ff8411156127c6576127c5612b16565b5b8360020a9150848211156127dd576127dc612b16565b5b50612842565b5060208310610133831016604e8410600b84101617156128185782820a90508381111561281357612812612b16565b5b612842565b61282584848460016126d8565b9250905081840481111561283c5761283b612b16565b5b81810290505b9392505050565b600061285482612953565b915061285f83612953565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561289857612897612b16565b5b828202905092915050565b60006128ae82612953565b91506128b983612953565b9250828210156128cc576128cb612b16565b5b828203905092915050565b60006128e28261295d565b91506128ed8361295d565b925082821015612900576128ff612b16565b5b828203905092915050565b600061291682612933565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006129758261298e565b9050919050565b60006129878261298e565b9050919050565b6000612999826129a0565b9050919050565b60006129ab82612933565b9050919050565b82818337600083830152505050565b60005b838110156129df5780820151818401526020810190506129c4565b838111156129ee576000848401525b50505050565b60006002820490506001821680612a0c57607f821691505b60208210811415612a2057612a1f612b74565b5b50919050565b612a2f82612c15565b810181811067ffffffffffffffff82111715612a4e57612a4d612bd2565b5b80604052505050565b6000612a6282612953565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a9557612a94612b16565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000612abf82612953565b9150612aca83612953565b925082612ada57612ad9612b45565b5b828206905092915050565b6000612af08261295d565b9150612afb8361295d565b925082612b0b57612b0a612b45565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b612e1c8161290b565b8114612e2757600080fd5b50565b612e3381612929565b8114612e3e57600080fd5b50565b612e4a81612953565b8114612e5557600080fd5b5056fea264697066735822122067ae6174cc7dd621966b4cc879c7be7b2c897aad5e2f9fba70f25a744fab258264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      }
    },
    "title": "FxStateRootTunnel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2190,
        "contract": "src/FxStateRootTunnel.sol:FxStateRootTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)2140"
      },
      {
        "astId": 2193,
        "contract": "src/FxStateRootTunnel.sol:FxStateRootTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)2158"
      },
      {
        "astId": 2195,
        "contract": "src/FxStateRootTunnel.sol:FxStateRootTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2199,
        "contract": "src/FxStateRootTunnel.sol:FxStateRootTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 67,
        "contract": "src/FxStateRootTunnel.sol:FxStateRootTunnel",
        "label": "latestData",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2158": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2140": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}